{"version":3,"sources":["modal/Modal.jsx","recipes/Recipe.jsx","App.js","reportWebVitals.js","index.js"],"names":["Modal","trigger","handleClose","title","calories","image","ingredients","className","src","alt","onClick","parseInt","map","ingredient","text","Recipie","useState","triggered","setTriggered","App","recipes","setRecipes","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","process","fetchedData","json","data","hits","href","onSubmit","e","preventDefault","type","placeholder","onChange","target","value","recipe","Recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","require","config","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.75abafec.chunk.js","sourcesContent":["import './modal.css';\r\n\r\nfunction Modal ({trigger, handleClose, title, calories, image, ingredients}) { \r\n\r\n    //modal is turned off until trigger is true or post is clicked\r\n    if (!trigger) return null;\r\n\r\n    return(\r\n        <div className=\"modal-window\">\r\n            <div className=\"modal-container\">\r\n                <img className=\"modal-picture\" src={image} alt=\"\" />\r\n                <div className=\"modal-title-bar\">\r\n                    <label className=\"modal-recipie-title\">{title}</label>\r\n                    <button className=\"modal-close-button\" onClick={handleClose}>x</button>\r\n                </div>\r\n                <p><span>Calories:</span> {parseInt(calories)}</p>\r\n                <ul className=\"ingredient-list\"> <span>Ingredients:</span>\r\n                    {ingredients.map(ingredient => (\r\n                        <li> {ingredient.text} </li>\r\n                    ))}\r\n                </ul>\r\n            </div>\r\n        </div>\r\n    ); \r\n};\r\n\r\nexport default Modal;","import './recipe.css';\r\nimport Modal from '../modal/Modal';\r\nimport React,{useState} from 'react';\r\n\r\n\r\nfunction Recipie ({title, calories, image, ingredients}) {\r\n\r\n    //trigger states to control modals\r\n    const[triggered, setTriggered] =useState(false);\r\n\r\n    return(\r\n        <div>\r\n            <div className=\"recipie-container\" onClick={() => setTriggered(true)}>\r\n                <img src={image} />\r\n                <label className=\"recipie-title\" >{title}</label>\r\n            </div>\r\n            <div className=\"Modal-box\">\r\n                <Modal \r\n                    trigger={triggered} \r\n                    handleClose={()=>setTriggered(false)}\r\n                    title={title} \r\n                    calories={calories} \r\n                    image={image}\r\n                    ingredients={ingredients} />\r\n            </div>\r\n            \r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Recipie;","import './App.css';\nimport Recipe from './recipes/Recipe';\nimport {useState, useEffect } from 'react';\n\nfunction App() {\n\n\n  const [recipes, setRecipes] =useState([]);\n  const [search, setSearch] = useState('');\n  const [query, setQuery] =useState('');  \n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n\n  const getRecipes = async() => {\n    const fetchedData = await fetch(`https://api.edamam.com/search?q=${query}&app_id=${process.env.REACT_APP_EDAMAM_ID}&app_key=${process.env.REACT_APP_EDAMAM_KEY}`);    \n    const data = await fetchedData.json();\n    setRecipes(data.hits);\n  }\n\n  //update the search to new value\n  const updateSearch = (e) => {\n    setSearch(e.target.value);\n  }\n\n  //load the form with new query when submitted\n  const getSearch = (e) => {\n    e.preventDefault();\n    setQuery(search);\n    setSearch('');\n  }\n\n  return (\n    <div className=\"App\">\n      <section className=\"title-bar\">\n        <a href=\"#\">find.recipe</a>\n      </section>\n\n      <form className=\"header-body\" onSubmit={getSearch} >\n        <h1 className=\"header-info\">\n          <span>The Hub To Find</span>\n          That Recipe\n        </h1>\n\n        <div className=\"search-container\">\n          <div className=\"search-bar\">\n            <input className=\"search-box\" \n                  type=\"text\" \n                  placeholder=\"dish,ingridient,keywords...\"\n                  onChange={updateSearch} />\n            <p>Example:\"Milkshake\",\"Banana\",\"Coffee\"...</p>\n          </div>\n\n          <button className=\"search-button\">Search Recipe</button>\n        </div>\n\n      </form>\n      <div className=\"recipie-box\">\n        {recipes.map(recipe =>(\n          <Recipe \n            key={recipe.recipe.label}\n            title={recipe.recipe.label} \n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n            calories={recipe.recipe.calories} />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nrequire('dotenv').config();\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}